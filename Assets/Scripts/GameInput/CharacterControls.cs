//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/CharacterControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CharacterControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CharacterControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CharacterControls"",
    ""maps"": [
        {
            ""name"": ""CharacterInScene"",
            ""id"": ""24f50e24-c4f0-4bc2-bed4-a325e0828787"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""f4f603ef-8a47-4f70-80a7-af9e1e51f1e6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""KeyBoardMovement"",
                    ""id"": ""9d97878d-a29a-4e93-a294-db74e528b9a7"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c7fb2401-3c26-4394-8f4a-5b5ae8873eec"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""fdd3c9c1-1e63-44a2-9fbb-5dfd58d2f94c"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""ea99936a-6095-496f-b17f-5e692c611865"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""53385123-b4e2-4427-b227-0818c9b676a1"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""CharacterInBattle"",
            ""id"": ""91494de1-60c9-4b05-bba0-1d9fcbb4f8f7"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""1e1ec222-6366-465e-8da3-a600378a7646"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""94964698-6230-411a-9fde-ee273f192896"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // CharacterInScene
        m_CharacterInScene = asset.FindActionMap("CharacterInScene", throwIfNotFound: true);
        m_CharacterInScene_Movement = m_CharacterInScene.FindAction("Movement", throwIfNotFound: true);
        // CharacterInBattle
        m_CharacterInBattle = asset.FindActionMap("CharacterInBattle", throwIfNotFound: true);
        m_CharacterInBattle_Newaction = m_CharacterInBattle.FindAction("New action", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CharacterInScene
    private readonly InputActionMap m_CharacterInScene;
    private List<ICharacterInSceneActions> m_CharacterInSceneActionsCallbackInterfaces = new List<ICharacterInSceneActions>();
    private readonly InputAction m_CharacterInScene_Movement;
    public struct CharacterInSceneActions
    {
        private @CharacterControls m_Wrapper;
        public CharacterInSceneActions(@CharacterControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_CharacterInScene_Movement;
        public InputActionMap Get() { return m_Wrapper.m_CharacterInScene; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CharacterInSceneActions set) { return set.Get(); }
        public void AddCallbacks(ICharacterInSceneActions instance)
        {
            if (instance == null || m_Wrapper.m_CharacterInSceneActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CharacterInSceneActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
        }

        private void UnregisterCallbacks(ICharacterInSceneActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
        }

        public void RemoveCallbacks(ICharacterInSceneActions instance)
        {
            if (m_Wrapper.m_CharacterInSceneActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICharacterInSceneActions instance)
        {
            foreach (var item in m_Wrapper.m_CharacterInSceneActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CharacterInSceneActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CharacterInSceneActions @CharacterInScene => new CharacterInSceneActions(this);

    // CharacterInBattle
    private readonly InputActionMap m_CharacterInBattle;
    private List<ICharacterInBattleActions> m_CharacterInBattleActionsCallbackInterfaces = new List<ICharacterInBattleActions>();
    private readonly InputAction m_CharacterInBattle_Newaction;
    public struct CharacterInBattleActions
    {
        private @CharacterControls m_Wrapper;
        public CharacterInBattleActions(@CharacterControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_CharacterInBattle_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_CharacterInBattle; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CharacterInBattleActions set) { return set.Get(); }
        public void AddCallbacks(ICharacterInBattleActions instance)
        {
            if (instance == null || m_Wrapper.m_CharacterInBattleActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CharacterInBattleActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(ICharacterInBattleActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(ICharacterInBattleActions instance)
        {
            if (m_Wrapper.m_CharacterInBattleActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICharacterInBattleActions instance)
        {
            foreach (var item in m_Wrapper.m_CharacterInBattleActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CharacterInBattleActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CharacterInBattleActions @CharacterInBattle => new CharacterInBattleActions(this);
    public interface ICharacterInSceneActions
    {
        void OnMovement(InputAction.CallbackContext context);
    }
    public interface ICharacterInBattleActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
}
