//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/GameInput/CharacterControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CharacterControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CharacterControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CharacterControls"",
    ""maps"": [
        {
            ""name"": ""PlayerMovement"",
            ""id"": ""24f50e24-c4f0-4bc2-bed4-a325e0828787"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""f4f603ef-8a47-4f70-80a7-af9e1e51f1e6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""7a3467ac-474f-43f5-82f6-f2c14b61ee34"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""92e442ee-b19d-4cb6-bfd7-cda2d50b6953"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""cdae5f9c-b6e3-4cec-94fe-c8a289cb147d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""KeyBoardMovement"",
                    ""id"": ""9d97878d-a29a-4e93-a294-db74e528b9a7"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c7fb2401-3c26-4394-8f4a-5b5ae8873eec"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""fdd3c9c1-1e63-44a2-9fbb-5dfd58d2f94c"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""ea99936a-6095-496f-b17f-5e692c611865"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""53385123-b4e2-4427-b227-0818c9b676a1"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""a7c0db03-22de-4088-8b05-d1b59dee2651"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0c493621-c343-4382-a5d4-34072197e11e"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fc5baa43-450a-4b48-a917-c4b5aabfb6b4"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerCamera"",
            ""id"": ""07a91897-d90b-410a-a4fd-4392723b7a8d"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""1871da40-9c96-4798-af3a-9bf287cec20f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Mouse"",
                    ""id"": ""ecdb6756-0d4d-4a3f-beeb-1204dc9cf779"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""d2d001fe-77a6-42a7-9f00-c7fb5f69bc45"",
                    ""path"": ""<Mouse>/delta/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""9cf443c9-af21-4f45-a1ab-8d88cd8a1297"",
                    ""path"": ""<Mouse>/delta/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""ca002ef3-387a-4a9f-adab-ce819889d204"",
                    ""path"": ""<Mouse>/delta/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""612acc0a-689e-48be-8439-492f6f2be1d3"",
                    ""path"": ""<Mouse>/delta/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""PlayerMonster"",
            ""id"": ""99425f57-c368-45df-bda5-2775820790a4"",
            ""actions"": [
                {
                    ""name"": ""Transform"",
                    ""type"": ""Button"",
                    ""id"": ""93a41c40-d7d6-46db-a8d5-e196ca597f32"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DeTrasnform"",
                    ""type"": ""Button"",
                    ""id"": ""a4786340-4818-4ef5-a8bd-36f23e690d09"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6572bbfd-c191-4907-aca6-db143fb2b0eb"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Transform"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1184ff52-1c19-4ad8-a8ac-e404f55aed78"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DeTrasnform"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerMenu"",
            ""id"": ""c09151a2-a6fa-44d5-a452-c631ceb66584"",
            ""actions"": [
                {
                    ""name"": ""OpenEquipemntMenu"",
                    ""type"": ""Button"",
                    ""id"": ""1d963b66-c1a7-497d-8691-77dc027ac8c5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OpenWeirdMenu"",
                    ""type"": ""Button"",
                    ""id"": ""02d5b115-e49f-4411-b474-bd39f5417514"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OpenInventoryMenu"",
                    ""type"": ""Button"",
                    ""id"": ""770922d3-c6ae-4d53-ad3d-3ce9a298ef41"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OpenOptionMenu"",
                    ""type"": ""Button"",
                    ""id"": ""5425e08b-b373-4b77-93f0-cc6c9a5405f1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""309cc8ef-af07-4aa4-8fc1-3993d6b3d26b"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenEquipemntMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a86a2ad6-43cd-4920-8d4b-a32fc1ef327f"",
                    ""path"": ""<Keyboard>/g"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenWeirdMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2aa69cb8-1788-41e7-af2e-e8466cf9fdbe"",
                    ""path"": ""<Keyboard>/b"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenInventoryMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a7481362-5708-44fd-b375-04ab456dd0fc"",
                    ""path"": ""<Keyboard>/o"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenOptionMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerMovement
        m_PlayerMovement = asset.FindActionMap("PlayerMovement", throwIfNotFound: true);
        m_PlayerMovement_Movement = m_PlayerMovement.FindAction("Movement", throwIfNotFound: true);
        m_PlayerMovement_Attack = m_PlayerMovement.FindAction("Attack", throwIfNotFound: true);
        m_PlayerMovement_Jump = m_PlayerMovement.FindAction("Jump", throwIfNotFound: true);
        m_PlayerMovement_Sprint = m_PlayerMovement.FindAction("Sprint", throwIfNotFound: true);
        // PlayerCamera
        m_PlayerCamera = asset.FindActionMap("PlayerCamera", throwIfNotFound: true);
        m_PlayerCamera_Movement = m_PlayerCamera.FindAction("Movement", throwIfNotFound: true);
        // PlayerMonster
        m_PlayerMonster = asset.FindActionMap("PlayerMonster", throwIfNotFound: true);
        m_PlayerMonster_Transform = m_PlayerMonster.FindAction("Transform", throwIfNotFound: true);
        m_PlayerMonster_DeTrasnform = m_PlayerMonster.FindAction("DeTrasnform", throwIfNotFound: true);
        // PlayerMenu
        m_PlayerMenu = asset.FindActionMap("PlayerMenu", throwIfNotFound: true);
        m_PlayerMenu_OpenEquipemntMenu = m_PlayerMenu.FindAction("OpenEquipemntMenu", throwIfNotFound: true);
        m_PlayerMenu_OpenWeirdMenu = m_PlayerMenu.FindAction("OpenWeirdMenu", throwIfNotFound: true);
        m_PlayerMenu_OpenInventoryMenu = m_PlayerMenu.FindAction("OpenInventoryMenu", throwIfNotFound: true);
        m_PlayerMenu_OpenOptionMenu = m_PlayerMenu.FindAction("OpenOptionMenu", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerMovement
    private readonly InputActionMap m_PlayerMovement;
    private List<IPlayerMovementActions> m_PlayerMovementActionsCallbackInterfaces = new List<IPlayerMovementActions>();
    private readonly InputAction m_PlayerMovement_Movement;
    private readonly InputAction m_PlayerMovement_Attack;
    private readonly InputAction m_PlayerMovement_Jump;
    private readonly InputAction m_PlayerMovement_Sprint;
    public struct PlayerMovementActions
    {
        private @CharacterControls m_Wrapper;
        public PlayerMovementActions(@CharacterControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_PlayerMovement_Movement;
        public InputAction @Attack => m_Wrapper.m_PlayerMovement_Attack;
        public InputAction @Jump => m_Wrapper.m_PlayerMovement_Jump;
        public InputAction @Sprint => m_Wrapper.m_PlayerMovement_Sprint;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMovementActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Attack.started += instance.OnAttack;
            @Attack.performed += instance.OnAttack;
            @Attack.canceled += instance.OnAttack;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Sprint.started += instance.OnSprint;
            @Sprint.performed += instance.OnSprint;
            @Sprint.canceled += instance.OnSprint;
        }

        private void UnregisterCallbacks(IPlayerMovementActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Attack.started -= instance.OnAttack;
            @Attack.performed -= instance.OnAttack;
            @Attack.canceled -= instance.OnAttack;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Sprint.started -= instance.OnSprint;
            @Sprint.performed -= instance.OnSprint;
            @Sprint.canceled -= instance.OnSprint;
        }

        public void RemoveCallbacks(IPlayerMovementActions instance)
        {
            if (m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerMovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerMovementActions @PlayerMovement => new PlayerMovementActions(this);

    // PlayerCamera
    private readonly InputActionMap m_PlayerCamera;
    private List<IPlayerCameraActions> m_PlayerCameraActionsCallbackInterfaces = new List<IPlayerCameraActions>();
    private readonly InputAction m_PlayerCamera_Movement;
    public struct PlayerCameraActions
    {
        private @CharacterControls m_Wrapper;
        public PlayerCameraActions(@CharacterControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_PlayerCamera_Movement;
        public InputActionMap Get() { return m_Wrapper.m_PlayerCamera; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerCameraActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerCameraActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerCameraActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerCameraActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
        }

        private void UnregisterCallbacks(IPlayerCameraActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
        }

        public void RemoveCallbacks(IPlayerCameraActions instance)
        {
            if (m_Wrapper.m_PlayerCameraActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerCameraActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerCameraActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerCameraActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerCameraActions @PlayerCamera => new PlayerCameraActions(this);

    // PlayerMonster
    private readonly InputActionMap m_PlayerMonster;
    private List<IPlayerMonsterActions> m_PlayerMonsterActionsCallbackInterfaces = new List<IPlayerMonsterActions>();
    private readonly InputAction m_PlayerMonster_Transform;
    private readonly InputAction m_PlayerMonster_DeTrasnform;
    public struct PlayerMonsterActions
    {
        private @CharacterControls m_Wrapper;
        public PlayerMonsterActions(@CharacterControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Transform => m_Wrapper.m_PlayerMonster_Transform;
        public InputAction @DeTrasnform => m_Wrapper.m_PlayerMonster_DeTrasnform;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMonster; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMonsterActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerMonsterActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerMonsterActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerMonsterActionsCallbackInterfaces.Add(instance);
            @Transform.started += instance.OnTransform;
            @Transform.performed += instance.OnTransform;
            @Transform.canceled += instance.OnTransform;
            @DeTrasnform.started += instance.OnDeTrasnform;
            @DeTrasnform.performed += instance.OnDeTrasnform;
            @DeTrasnform.canceled += instance.OnDeTrasnform;
        }

        private void UnregisterCallbacks(IPlayerMonsterActions instance)
        {
            @Transform.started -= instance.OnTransform;
            @Transform.performed -= instance.OnTransform;
            @Transform.canceled -= instance.OnTransform;
            @DeTrasnform.started -= instance.OnDeTrasnform;
            @DeTrasnform.performed -= instance.OnDeTrasnform;
            @DeTrasnform.canceled -= instance.OnDeTrasnform;
        }

        public void RemoveCallbacks(IPlayerMonsterActions instance)
        {
            if (m_Wrapper.m_PlayerMonsterActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerMonsterActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerMonsterActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerMonsterActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerMonsterActions @PlayerMonster => new PlayerMonsterActions(this);

    // PlayerMenu
    private readonly InputActionMap m_PlayerMenu;
    private List<IPlayerMenuActions> m_PlayerMenuActionsCallbackInterfaces = new List<IPlayerMenuActions>();
    private readonly InputAction m_PlayerMenu_OpenEquipemntMenu;
    private readonly InputAction m_PlayerMenu_OpenWeirdMenu;
    private readonly InputAction m_PlayerMenu_OpenInventoryMenu;
    private readonly InputAction m_PlayerMenu_OpenOptionMenu;
    public struct PlayerMenuActions
    {
        private @CharacterControls m_Wrapper;
        public PlayerMenuActions(@CharacterControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @OpenEquipemntMenu => m_Wrapper.m_PlayerMenu_OpenEquipemntMenu;
        public InputAction @OpenWeirdMenu => m_Wrapper.m_PlayerMenu_OpenWeirdMenu;
        public InputAction @OpenInventoryMenu => m_Wrapper.m_PlayerMenu_OpenInventoryMenu;
        public InputAction @OpenOptionMenu => m_Wrapper.m_PlayerMenu_OpenOptionMenu;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMenu; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMenuActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerMenuActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerMenuActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerMenuActionsCallbackInterfaces.Add(instance);
            @OpenEquipemntMenu.started += instance.OnOpenEquipemntMenu;
            @OpenEquipemntMenu.performed += instance.OnOpenEquipemntMenu;
            @OpenEquipemntMenu.canceled += instance.OnOpenEquipemntMenu;
            @OpenWeirdMenu.started += instance.OnOpenWeirdMenu;
            @OpenWeirdMenu.performed += instance.OnOpenWeirdMenu;
            @OpenWeirdMenu.canceled += instance.OnOpenWeirdMenu;
            @OpenInventoryMenu.started += instance.OnOpenInventoryMenu;
            @OpenInventoryMenu.performed += instance.OnOpenInventoryMenu;
            @OpenInventoryMenu.canceled += instance.OnOpenInventoryMenu;
            @OpenOptionMenu.started += instance.OnOpenOptionMenu;
            @OpenOptionMenu.performed += instance.OnOpenOptionMenu;
            @OpenOptionMenu.canceled += instance.OnOpenOptionMenu;
        }

        private void UnregisterCallbacks(IPlayerMenuActions instance)
        {
            @OpenEquipemntMenu.started -= instance.OnOpenEquipemntMenu;
            @OpenEquipemntMenu.performed -= instance.OnOpenEquipemntMenu;
            @OpenEquipemntMenu.canceled -= instance.OnOpenEquipemntMenu;
            @OpenWeirdMenu.started -= instance.OnOpenWeirdMenu;
            @OpenWeirdMenu.performed -= instance.OnOpenWeirdMenu;
            @OpenWeirdMenu.canceled -= instance.OnOpenWeirdMenu;
            @OpenInventoryMenu.started -= instance.OnOpenInventoryMenu;
            @OpenInventoryMenu.performed -= instance.OnOpenInventoryMenu;
            @OpenInventoryMenu.canceled -= instance.OnOpenInventoryMenu;
            @OpenOptionMenu.started -= instance.OnOpenOptionMenu;
            @OpenOptionMenu.performed -= instance.OnOpenOptionMenu;
            @OpenOptionMenu.canceled -= instance.OnOpenOptionMenu;
        }

        public void RemoveCallbacks(IPlayerMenuActions instance)
        {
            if (m_Wrapper.m_PlayerMenuActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerMenuActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerMenuActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerMenuActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerMenuActions @PlayerMenu => new PlayerMenuActions(this);
    public interface IPlayerMovementActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnSprint(InputAction.CallbackContext context);
    }
    public interface IPlayerCameraActions
    {
        void OnMovement(InputAction.CallbackContext context);
    }
    public interface IPlayerMonsterActions
    {
        void OnTransform(InputAction.CallbackContext context);
        void OnDeTrasnform(InputAction.CallbackContext context);
    }
    public interface IPlayerMenuActions
    {
        void OnOpenEquipemntMenu(InputAction.CallbackContext context);
        void OnOpenWeirdMenu(InputAction.CallbackContext context);
        void OnOpenInventoryMenu(InputAction.CallbackContext context);
        void OnOpenOptionMenu(InputAction.CallbackContext context);
    }
}
